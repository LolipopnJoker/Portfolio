library(tidyverse) # Importing tidyverse
library(tm) # Importing tm
library(syuzhet) # Importing syuzhet
DB  <- read.csv('G:/My Drive/Portfolio/R/Project_1/dataset.csv', row.names = 1) # Importing the data.
# Splitting the date column
DB <- separate(DB, Release.Date, c("release.month", "release.day", "release.year"), sep = " ")
DB <- separate(DB, Genre, c("Genre.1", "Genre.2", "Genre.3", "Genre.4", "Genre.5", "Genre.6"), sep = ", ")
# Cleaning from unwanted symbols that might affect the analysis.
tm_map(DB, removePunctuation)
# Cleaning from unwanted symbols that might affect the analysis.
tm_map(DB$release.month, removePunctuation)
View(DB)
library(tidyverse) # Importing tidyverse
library(tm) # Importing tm
library(syuzhet) # Importing syuzhet
library(srt)# Importing srt
library(glue) # Importing glue
subtitles <- t(read_srt('G:/My Drive/Portfolio/R/Project_1/subtitles/1.srt')) # Experimenting with importing an SRT file
subtitles <- as.data.frame(subtitles)
subtitles <- unite(subtitles, col = "subtitles", 1:ncol(subtitles), remove = TRUE, sep = " ")
DB  <- read.csv('G:/My Drive/Portfolio/R/Project_1/dataset.csv', sep = " ", row.names = 1) # Importing the data.
DB  <- read.csv('G:/My Drive/Portfolio/R/Project_1/dataset.csv', sep = " ", row.names = 1) # Importing the data.
DB  <- read.csv('G:/My Drive/Portfolio/R/Project_1/dataset.csv', row.names = 1) # Importing the data.
DB$Subtitles <- NA
DB$Subtitles[1] <- subtitles$subtitles[4]
View(DB)
number_of_subtitles_files <- 13
print(subtitle_path)
for (i in 1:number_of_subtitles_files){
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
print(subtitle_path)
}
for (i in 1:number_of_subtitles_files){
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- t(read_srt(subtitle_path))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitles), remove = TRUE, sep = " ")
DB$Subtitles[i] <- subtitle$subtitle[i]
}
View(DB)
for (i in 1:number_of_subtitles_files){
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- t(read_srt(subtitle_path))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitles), remove = TRUE, sep = " ")
DB$Subtitles[i] <- subtitle$subtitle[4]
}
View(DB)
number_of_subtitles_files <- 10
for (i in 1:number_of_subtitles_files){
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- t(read_srt(subtitle_path))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitles), remove = TRUE, sep = " ")
DB$Subtitles[i] <- subtitle$subtitle[4]
}
for (i in 1:number_of_subtitles_files){
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- suppressWarnings(t(read_srt(subtitle_path)))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitles), remove = TRUE, sep = " ")
DB$Subtitles[i] <- subtitle$subtitle[4]
}
View(DB)
library(tidyverse) # Importing tidyverse
library(tm) # Importing tm
library(syuzhet) # Importing syuzhet
library(srt)# Importing srt
library(glue) # Importing glue
DB  <- read.csv('G:/My Drive/Portfolio/R/Project_1/dataset.csv', row.names = 1) # Importing the data.
DB$Subtitles <- NA
number_of_subtitles_files <- 10
for (i in 1:number_of_subtitles_files){
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- suppressWarnings(t(read_srt(subtitle_path)))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitles), remove = TRUE, sep = " ")
DB$Subtitles[i] <- subtitle$subtitle[4]
}
for (i in 1:number_of_subtitles_files){
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- suppressWarnings(t(read_srt(subtitle_path)))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitles), remove = TRUE, sep = " ")
DB$Subtitle[i] <- subtitle$subtitle[4]
}
for (i in 1:number_of_subtitles_files){
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- suppressWarnings(t(read_srt(subtitle_path)))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ")
DB$Subtitles[i] <- subtitle$subtitle[4]
}
View(DB)
number_of_subtitles_files <- 13
for (i in 1:number_of_subtitles_files){
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- suppressWarnings(t(read_srt(subtitle_path)))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ")
DB$Subtitles[i] <- subtitle$subtitle[4]
}
View(DB)
subtitles <- t(read_srt('G:/My Drive/Portfolio/R/Project_1/subtitles/12.srt')) # Experimenting with importing an SRT file
subtitles <- (read_srt('G:/My Drive/Portfolio/R/Project_1/subtitles/12.srt')) # Experimenting with importing an SRT file
subtitles <- t(read_srt('G:/My Drive/Portfolio/R/Project_1/subtitles/12.srt')) # Experimenting with importing an SRT file
subtitles <- as.data.frame(subtitles)
subtitles <- unite(subtitles, col = "subtitles", 1:ncol(subtitles), remove = TRUE, sep = " ")
View(subtitle)
View(subtitles)
number_of_subtitles_files <- 74
for (i in 1:number_of_subtitles_files){
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- suppressWarnings(t(read_srt(subtitle_path)))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ")
DB$Subtitles[i] <- subtitle$subtitle[4]
}
suppressWarnings(library(tidyverse)) # Importing tidyverse
suppressWarnings(library(tm)) # Importing tm
suppressWarnings(library(syuzhet)) # Importing syuzhet
suppressWarnings(library(srt))# Importing srt
suppressWarnings(library(glue)) # Importing glue
subtitles <- t(read_srt('G:/My Drive/Portfolio/R/Project_1/subtitles/12.srt')) # Experimenting with importing an SRT file
DB  <- read.csv('G:/My Drive/Portfolio/R/Project_1/dataset.csv', row.names = 1) # Importing the data.
DB$Subtitles <- NA
number_of_subtitles_files <- 74
for (i in 1:number_of_subtitles_files){
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- suppressWarnings(t(read_srt(subtitle_path)))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ")
DB$Subtitles[i] <- subtitle$subtitle[4]
}
for (i in 1:number_of_subtitles_files){
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- suppressWarnings(t(read_srt(subtitle_path)))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ")
DB$Subtitles[i] <- subtitle$subtitle[4]
}
number_of_subtitles_files <- 50
for (i in 1:number_of_subtitles_files){
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- suppressWarnings(t(read_srt(subtitle_path)))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ")
DB$Subtitles[i] <- subtitle$subtitle[4]
}
number_of_subtitles_files <- 30
for (i in 1:number_of_subtitles_files){
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- suppressWarnings(t(read_srt(subtitle_path)))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ")
DB$Subtitles[i] <- subtitle$subtitle[4]
}
number_of_subtitles_files <- 23
for (i in 1:number_of_subtitles_files){
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- suppressWarnings(t(read_srt(subtitle_path)))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ")
DB$Subtitles[i] <- subtitle$subtitle[4]
}
subtitles <- t(read_srt('G:/My Drive/Portfolio/R/Project_1/subtitles/1.srt')) # Experimenting with importing an SRT file
subtitles <- t(read_srt('G:/My Drive/Portfolio/R/Project_1/subtitles/1.srt')) # Experimenting with importing an SRT file
subtitles <- read_srt('G:/My Drive/Portfolio/R/Project_1/subtitles/1.srt') # Experimenting with importing an SRT file
subtitles <- t(read_srt('G:/My Drive/Portfolio/R/Project_1/subtitles/1.srt')) # Experimenting with importing an SRT file
read_srt(readLines('G:/My Drive/Portfolio/R/Project_1/subtitles/1.srt', warn = FALSE))
subtitles <- t(read_srt('G:/My Drive/Portfolio/R/Project_1/subtitles/1.srt')) # Experimenting with importing an SRT file
library(multiplex)
subt <- read.srt('G:/My Drive/Portfolio/R/Project_1/subtitles/1.srt', header = FALSE)
subt <- read_srt('G:/My Drive/Portfolio/R/Project_1/subtitles/1.srt')
suppressWarnings(library(tidyverse)) # Importing tidyverse
suppressWarnings(library(tm)) # Importing tm
suppressWarnings(library(syuzhet)) # Importing syuzhet
suppressWarnings(library(srt))# Importing srt
suppressWarnings(library(glue)) # Importing glue
subt <- read_srt('G:/My Drive/Portfolio/R/Project_1/subtitles/1.srt')
View(subt)
subtitles <- t(read_srt('G:/My Drive/Portfolio/R/Project_1/subtitles/1.srt')) # Experimenting with importing an SRT file
subtitles <- as.data.frame(subtitles)
subtitles <- unite(subtitles, col = "subtitles", 1:ncol(subtitles), remove = TRUE, sep = " ")
View(subtitles)
DB$Subtitles <- NA
DB  <- read.csv('G:/My Drive/Portfolio/R/Project_1/dataset.csv', row.names = 1) # Importing the data.
DB$Subtitles <- NA
number_of_subtitles_files <- 23
number_of_subtitles_files <- 73
for (i in 1:number_of_subtitles_files){
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- suppressWarnings(t(read_srt(subtitle_path)))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ")
DB$Subtitles[i] <- subtitle$subtitle[4]
}
View(DB)
for (i in 1:number_of_subtitles_files){
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- suppressWarnings(t(read_srt(subtitle_path)))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ")
DB$Subtitles[i] <- subtitle$subtitle[4]
}
subtitles <- t(read_srt('G:/My Drive/Portfolio/R/Project_1/subtitles/36.srt')) # Experimenting with importing an SRT file
subtitles <- t(read_srt('G:/My Drive/Portfolio/R/Project_1/subtitles/36.srt')) # Experimenting with importing an SRT file
subtitles <- as.data.frame(subtitles)
subtitles <- unite(subtitles, col = "subtitles", 1:ncol(subtitles), remove = TRUE, sep = " ")
DB  <- read.csv('G:/My Drive/Portfolio/R/Project_1/dataset.csv', row.names = 1) # Importing the data.
DB$Subtitles <- NA
number_of_subtitles_files <- 73
for (i in 1:number_of_subtitles_files){
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- suppressWarnings(t(read_srt(subtitle_path)))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ")
DB$Subtitles[i] <- subtitle$subtitle[4]
}
View(DB)
for (i in 1:number_of_subtitles_files){
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- suppressWarnings(t(read_srt(subtitle_path)))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ")
DB$Subtitles[i] <- subtitle$subtitle[4]
}
View(DB)
for (i in 1:number_of_subtitles_files){
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- suppressWarnings(t(read_srt(subtitle_path)))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ")
DB$Subtitles[i] <- subtitle$subtitle[4]
}
View(DB)
for (i in 1:number_of_subtitles_files){
try(
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt'),
subtitle <- suppressWarnings(t(read_srt(subtitle_path))),
subtitle <- as.data.frame(subtitle),
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " "),
DB$Subtitles[i] <- subtitle$subtitle[4]
)
}
for (i in 1:number_of_subtitles_files){
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- suppressWarnings(t(read_srt(subtitle_path)))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ")
DB$Subtitles[i] <- subtitle$subtitle[4]
}
View(DB)
for (i in 1:number_of_subtitles_files){
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- suppressWarnings(t(read_srt(subtitle_path)))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ")
DB$Subtitles[i] <- subtitle$subtitle[4]
}
View(DB)
suppressWarnings(library(tidyverse)) # Importing tidyverse
suppressWarnings(library(tm)) # Importing tm
suppressWarnings(library(syuzhet)) # Importing syuzhet
suppressWarnings(library(srt))# Importing srt
suppressWarnings(library(glue)) # Importing glue
subtitles <- t(read_srt('G:/My Drive/Portfolio/R/Project_1/subtitles/36.srt')) # Experimenting with importing an SRT file
subtitles <- as.data.frame(subtitles)
subtitles <- unite(subtitles, col = "subtitles", 1:ncol(subtitles), remove = TRUE, sep = " ")
corpus <- iconv(DB$Movie.Info, to = "utf-8") # Creating a list with all the movie descriptions
## Obtain sentiment score
sentiment_score_DF <- get_nrc_sentiment(corpus) # Creating a dataframe with sentiment scores.
full_DB <- cbind(DB, sentiment_score_DF) # Merging the dataframes
linear_model <- lm(full_DB$World.Sales..in...~full_DB$anger+full_DB$anticipation+
full_DB$disgust+full_DB$fear+full_DB$joy+full_DB$sadness+
full_DB$surprise+full_DB$trust+full_DB$negative+full_DB$positive)
View(full_DB)
suppressWarnings(library(tidyverse)) # Importing tidyverse
suppressWarnings(library(tm)) # Importing tm
suppressWarnings(library(syuzhet)) # Importing syuzhet
suppressWarnings(library(srt))# Importing srt
suppressWarnings(library(glue)) # Importing glue
DB  <- read.csv('G:/My Drive/Portfolio/R/Project_1/dataset.csv', row.names = 1) # Importing the data.
DB$Subtitles <- NA
number_of_subtitles_files <- 490
progress_bar <- txtProgressBar(min = 0,
max = number_of_subtitles_files,
style = 3,
width = 50,
char = "=")
for (i in 1:number_of_subtitles_files){
try({
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- suppressWarnings(t(read_srt(subtitle_path)))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ")
DB$Subtitles[i] <- subtitle$subtitle[4]
setTxtProgressBar(progress_bar, i)
},
silent = TRUE)
}
View(DB)
suppressWarnings(library(tidyverse)) # Importing tidyverse
suppressWarnings(library(tm)) # Importing tm
suppressWarnings(library(syuzhet)) # Importing syuzhet
suppressWarnings(library(srt))# Importing srt
suppressWarnings(library(glue)) # Importing glue
DB  <- read.csv('G:/My Drive/Portfolio/R/Project_1/dataset.csv', row.names = 1) # Importing the data.
DB$Subtitles <- NA
number_of_subtitles_files <- 863
progress_bar <- txtProgressBar(min = 0,
max = number_of_subtitles_files,
style = 3,
width = 50,
char = "=")
for (i in 1:number_of_subtitles_files){
try({
subtitle_path <- glue('G:/My Drive/Portfolio/R/Project_1/subtitles/{i}.srt')
subtitle <- suppressWarnings(t(read_srt(subtitle_path)))
subtitle <- as.data.frame(subtitle)
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ")
DB$Subtitles[i] <- subtitle$subtitle[4]
setTxtProgressBar(progress_bar, i)
},
silent = TRUE)
}
View(DB)
suppressWarnings(library(tidyverse)) # Importing tidyverse
DB  <- read.csv('G:/My Drive/Portfolio/R/Project_1/dataset.csv', row.names = 1) # Importing the data.
number_of_subtitles_files <- length(DB$Title)
suppressWarnings(library(tidyverse)) # Importing tidyverse
suppressWarnings(library(tm)) # Importing tm
suppressWarnings(library(syuzhet)) # Importing syuzhet
suppressWarnings(library(srt))# Importing srt
suppressWarnings(library(glue)) # Importing glue
DB  <- read.csv('G:/My Drive/Portfolio/R/Project_1/dataset.csv', row.names = 1) # Importing the data.
DB$Subtitles <- NA # Adding an empty column to store all the subtitles.
number_of_subtitles_files <- length(DB$Title)
progress_bar <- txtProgressBar(min = 0,
max = number_of_subtitles_files,
style = 3,
width = 50,
char = "=") # Creating a progress bar
for (i in 1:number_of_subtitles_files){
# Using the try function in order to make the loop run even if an STR file isn't valid.
try({
subtitle_path <- glue('C:/Users/yoavw/Documents/GitHub/Portfolio/Portfolio/R/Project_1/subtitles/{i}.srt') # Path to the SRT file in position i
subtitle <- suppressWarnings(t(read_srt(subtitle_path))) # Importing the SRT file in position i in a vertical matrix
subtitle <- as.data.frame(subtitle) # Turning it into a data frame
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ") # Turning the matrix to 1X1
DB$Subtitles[i] <- subtitle$subtitle[4] # Inserting the subtitles into the main data-set
setTxtProgressBar(progress_bar, i) # Updating progress bar
},
silent = TRUE) # If wasn't successful, ignore
}
close(progress_bar) # Closing progress bar
sum(is.na(DB$Subtitles)) # Counting the amount of NA's in the Subtitles column. Ideally, it would be equal to none.
# Splitting the date column
DB <- separate(DB, Release.Date, c("release.month", "release.day", "release.year"), sep = " ") # Separating the date column
DB <- separate(DB, Genre, c("Genre.1", "Genre.2", "Genre.3", "Genre.4", "Genre.5", "Genre.6"), sep = ", ")# Separating the genre column
# Cleaning from unwanted symbols that might affect the analysis.
DB[] <- lapply(DB, gsub, pattern=',', replacement='') # Deleting all the , symbols.
View(DB)
DB[] <- lapply(DB, gsub, pattern="'", replacement='') # Deleting all the ' symbols.
DB[] <- lapply(DB, gsub, pattern='//[', replacement='') # Deleting all the [ symbols.
DB[] <- lapply(DB, gsub, pattern='\\]', replacement='') # Deleting all the ] symbols.
worldwide_sales_mean <- mean(as.numeric(DB$World.Sales..in...), na.rm = TRUE) # Worldwide Sales Mean calculation
worldwide_sales_mean # Displaying Worldwide Sales Mean
worldwide_sales_sd <- sd(as.numeric(DB$World.Sales..in...), na.rm = TRUE) # Worldwide Sales SD calculation
worldwide_sales_sd # Displaying Worldwide Sales SD
corpus <- iconv(DB$Movie.Info, to = "utf-8") # Creating a list with all the movie descriptions
## Obtain sentiment score
sentiment_score_DF <- get_nrc_sentiment(corpus) # Creating a dataframe with sentiment scores.
full_DB <- cbind(DB, sentiment_score_DF) # Merging the dataframes
corpus <- iconv(DB$Subtitles, to = "utf-8") # Creating a list with all the movie descriptions
## Obtain sentiment score
sentiment_score_DF <- get_nrc_sentiment(corpus) # Creating a dataframe with sentiment scores.
full_DB <- cbind(DB, sentiment_score_DF) # Merging the dataframes
View(full_DB)
View(full_DB)
sub_DB <- full_DB[, c(9, 19:28)]
View(sub_DB)
cor_for_table <- cor(sub_DB)
sub_DB <- full_DB[, as.numeric(c(9, 19:28))] # Only the relevant data for the corrolation matrix
cor_for_table <- cor(sub_DB)
View(sub_DB)
sub_DB$World.Sales..in... <- as.numeric(sub_DB$World.Sales..in...)
cor_for_table <- cor(sub_DB)
suppressWarnings(library(corrplot)) # Importing corrplot
corrplot(corr = cor_for_table,
method = "number",
type = "lower",
title = "Movies subtitles and emotions")
cor.test(sub_DB)
sub_DB$World.Sales..in... <- as.numeric(sub_DB$World.Sales..in...) # Turning the first column to numeric
cor.test(sub_DB)
corr.test(sub_DB)
install.packages("psych")
corr.test(sub_DB)
suppressWarnings(library(psych)) # Importing psych
corr.test(sub_DB)
cor.test(
sub_DB$World.Sales..in...,
sub_DB$fear
)
cor.test(
sub_DB$World.Sales..in...,
sub_DB$joy
)
cor.test(
sub_DB$World.Sales..in...,
sub_DB$positive
)
cor.test(
sub_DB$World.Sales..in...,
sub_DB$negative
)
cor.test(
sub_DB$World.Sales..in...,
sub_DB$anger
)
cor.test(
sub_DB$World.Sales..in...,
sub_DB$sadness
)
cor.test(
sub_DB$World.Sales..in...,
sub_DB$disgust
)
cor.test(
sub_DB$World.Sales..in...,
sub_DB$trust
)
cor.test(
sub_DB$World.Sales..in...,
sub_DB$fear
)
corr.test(sub_DB)
suppressWarnings(library(tidyverse)) # Importing tidyverse
suppressWarnings(library(tm)) # Importing tm
suppressWarnings(library(syuzhet)) # Importing syuzhet
suppressWarnings(library(srt))# Importing srt
suppressWarnings(library(glue)) # Importing glue
suppressWarnings(library(corrplot)) # Importing corrplot
suppressWarnings(library(psych)) # Importing psych
DB  <- read.csv('G:/My Drive/Portfolio/R/Project_1/dataset.csv', row.names = 1) # Importing the data.
DB$Subtitles <- NA # Adding an empty column to store all the subtitles.
number_of_subtitles_files <- length(DB$Title)
cor_for_table <- cor(sub_DB) # Calculating the correlation matrix
corrplot(corr = cor_for_table,
method = "number",
type = "lower",
title = "Movies subtitles and emotions")
suppressWarnings(library(tidyverse)) # Importing tidyverse
suppressWarnings(library(tm)) # Importing tm
suppressWarnings(library(syuzhet)) # Importing syuzhet
suppressWarnings(library(srt))# Importing srt
suppressWarnings(library(glue)) # Importing glue
suppressWarnings(library(corrplot)) # Importing corrplot
suppressWarnings(library(psych)) # Importing psych
DB  <- read.csv('G:/My Drive/Portfolio/R/Project_1/dataset.csv', row.names = 1) # Importing the data.
DB$Subtitles <- NA # Adding an empty column to store all the subtitles.
DB  <- read.csv("C:/Users/yoavw/Documents/GitHub/Portfolio/Portfolio/dataset.csv", row.names = 1) # Importing the data.
DB$Subtitles <- NA # Adding an empty column to store all the subtitles.
number_of_subtitles_files <- length(DB$Title)
progress_bar <- txtProgressBar(min = 0,
max = number_of_subtitles_files,
style = 3,
width = 50,
char = "=") # Creating a progress bar
for (i in 1:number_of_subtitles_files){
# Using the try function in order to make the loop run even if an STR file isn't valid.
try({
subtitle_path <- glue('C:/Users/yoavw/Documents/GitHub/Portfolio/Portfolio/R/Project_1/subtitles/{i}.srt') # Path to the SRT file in position i
subtitle <- suppressWarnings(t(read_srt(subtitle_path))) # Importing the SRT file in position i in a vertical matrix
subtitle <- as.data.frame(subtitle) # Turning it into a data frame
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ") # Turning the matrix to 1X1
DB$Subtitles[i] <- subtitle$subtitle[4] # Inserting the subtitles into the main data-set
setTxtProgressBar(progress_bar, i) # Updating progress bar
},
silent = TRUE) # If wasn't successful, ignore
}
close(progress_bar) # Closing progress bar
sum(is.na(DB$Subtitles)) # Counting the amount of NA's in the Subtitles column. Ideally, it would be equal to none.
# Splitting the date column
DB <- separate(DB, Release.Date, c("release.month", "release.day", "release.year"), sep = " ") # Separating the date column
DB <- separate(DB, Genre, c("Genre.1", "Genre.2", "Genre.3", "Genre.4", "Genre.5", "Genre.6"), sep = ", ")# Separating the genre column
# Cleaning from unwanted symbols that might affect the analysis.
DB[] <- lapply(DB, gsub, pattern=',', replacement='') # Deleting all the , symbols.
DB[] <- lapply(DB, gsub, pattern="'", replacement='') # Deleting all the ' symbols.
DB[] <- lapply(DB, gsub, pattern='//[', replacement='') # Deleting all the [ symbols.
DB[] <- lapply(DB, gsub, pattern='\\]', replacement='') # Deleting all the ] symbols.
progress_bar <- txtProgressBar(min = 0,
max = number_of_subtitles_files,
style = 3,
width = 50,
char = "=") # Creating a progress bar
for (i in 1:number_of_subtitles_files){
# Using the try function in order to make the loop run even if an STR file isn't valid.
try({
subtitle_path <- glue('C:/Users/yoavw/Documents/GitHub/Portfolio/Portfolio/subtitles/{i}.srt') # Path to the SRT file in position i
subtitle <- suppressWarnings(t(read_srt(subtitle_path))) # Importing the SRT file in position i in a vertical matrix
subtitle <- as.data.frame(subtitle) # Turning it into a data frame
subtitle <- unite(subtitle, col = "subtitles", 1:ncol(subtitle), remove = TRUE, sep = " ") # Turning the matrix to 1X1
DB$Subtitles[i] <- subtitle$subtitle[4] # Inserting the subtitles into the main data-set
setTxtProgressBar(progress_bar, i) # Updating progress bar
},
silent = TRUE) # If wasn't successful, ignore
}
close(progress_bar) # Closing progress bar
sum(is.na(DB$Subtitles)) # Counting the amount of NA's in the Subtitles column. Ideally, it would be equal to none.
write.csv(DB, "C:/Users/yoavw/Documents/GitHub/Portfolio/Portfolio/new_dataset.csv")
